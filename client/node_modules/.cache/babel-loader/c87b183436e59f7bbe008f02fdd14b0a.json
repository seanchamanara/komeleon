{"ast":null,"code":"export const addItemToCart = (cartItems, cartItemToAdd) => {\n  //checking if item to be added already exists\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); //if item exists return map function (creating new array) new object adding +1 to quantity prop\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id //creating a new object spreading cartItem, adding a quantity prop + 1\n    ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } //if cartItem id does not match cartItemToAdd id return original cart item\n    : cartItem);\n  } //if cart item is not found return new array with existing cartItems add an object equal to cartItemToAdd, with a base quantity of 1\n\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    //filter returning cartitems (minus matching cartItem id's which is removed)\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id //return new object spreading in cartItem with its propererties, but decrease the quantity property by one \n  ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};","map":{"version":3,"sources":["/Users/seanc/Desktop/React_2019/komeleon/client/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AAEvD;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADrB,CAAzB,CAHuD,CAOnD;;AACA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,CACI;AADJ,MAEE,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KAFF,CAII;AAJJ,MAKEH,QANC,CAAP;AAQH,GAjBkD,CAmBnD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBM,IAAAA,QAAQ,EAAE;AAA9B,GAAf,CAAP;AAEP,CAtBM;AAwBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAWS,gBAAX,KAAgC;AAC9D,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB;;AAIA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACjC;AACA,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACH;;AACD,SAAOL,SAAS,CAACM,GAAV,CAAeF,QAAQ,IAC1BA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,CAEA;AAFA,IAGE,EAAC,GAAGD,QAAJ;AAAcG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAmB;AAA3C,GAHF,GAIEH,QALC,CAAP;AAQH,CAjBM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n\n    //checking if item to be added already exists\n    const existingCartItem = cartItems.find(\n        cartItem => cartItem.id === cartItemToAdd.id\n        );\n\n        //if item exists return map function (creating new array) new object adding +1 to quantity prop\n        if(existingCartItem) {\n            return cartItems.map(cartItem => \n                cartItem.id === cartItemToAdd.id\n                    //creating a new object spreading cartItem, adding a quantity prop + 1\n                ? { ...cartItem, quantity: cartItem.quantity + 1 }\n\n                    //if cartItem id does not match cartItemToAdd id return original cart item\n                : cartItem\n                )\n        }\n\n        //if cart item is not found return new array with existing cartItems add an object equal to cartItemToAdd, with a base quantity of 1\n        return [...cartItems, { ...cartItemToAdd, quantity: 1 }]\n\n};\n\nexport const removeItemFromCart = (cartItems,cartItemToRemove) => {\n    const existingCartItem = cartItems.find(\n        cartItem => cartItem.id === cartItemToRemove.id\n    )\n\n    if (existingCartItem.quantity === 1) {\n        //filter returning cartitems (minus matching cartItem id's which is removed)\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n    }\n    return cartItems.map( cartItem => \n        cartItem.id === cartItemToRemove.id \n\n        //return new object spreading in cartItem with its propererties, but decrease the quantity property by one \n        ? {...cartItem, quantity: cartItem.quantity -1 }\n        : cartItem\n       \n    );\n}"]},"metadata":{},"sourceType":"module"}